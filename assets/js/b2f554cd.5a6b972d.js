"use strict";(self.webpackChunkalexmercerind_github_io=self.webpackChunkalexmercerind_github_io||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"messed-up-storage-access-since-android-11","metadata":{"permalink":"/blog/messed-up-storage-access-since-android-11","source":"@site/blog/2022-09-01-messed-up-storage-access-since-android-11.md","title":"Messed up storage access since Android 11","description":"Android recently introduced Scoped Storage with things like Storage Access Framework & MediaStore.","date":"2022-09-01T00:00:00.000Z","formattedDate":"September 1, 2022","tags":[{"label":"flutter","permalink":"/blog/tags/flutter"},{"label":"android","permalink":"/blog/tags/android"},{"label":"scoped-storage","permalink":"/blog/tags/scoped-storage"},{"label":"storage-access-framework","permalink":"/blog/tags/storage-access-framework"},{"label":"media-store","permalink":"/blog/tags/media-store"},{"label":"saf","permalink":"/blog/tags/saf"}],"readingTime":9.28,"truncated":true,"authors":[{"name":"Hitesh","title":"Flutter & React.js developer. Writes C++, Dart, JS & Python. Maintains few utility libraries. Beautiful UI <3","url":"https://github.com/alexmercerind","imageURL":"https://github.com/alexmercerind.png","key":"alexmercerind"}],"frontMatter":{"slug":"messed-up-storage-access-since-android-11","authors":"alexmercerind","title":"Messed up storage access since Android 11","tags":["flutter","android","scoped-storage","storage-access-framework","media-store","saf"]},"nextItem":{"title":"Animations in Flutter done right [Flutter 2 & 3]","permalink":"/blog/animations-in-flutter-done-right"}},"content":"Android recently introduced [Scoped Storage](https://developer.android.com/about/versions/11/privacy/storage) with things like [Storage Access Framework](https://developer.android.com/guide/topics/providers/document-provider) & [MediaStore](https://developer.android.com/reference/android/provider/MediaStore).\\r\\n\\r\\nTo put it simply, it\'s entirely messed up. There are number of use-cases which haven\'t been covered, I\'ve seen users struggling after Android 10 & developers even more.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## The Situation\\r\\n\\r\\nTo begin with, first of all, I won\'t call myself an Android developer because I never target Android primarily from my codebase. I\'m instead a [Flutter](http://flutter.dev/) developer, a specialized framework which allows to build cross-platform applications from a single codebase, while leveraging native functionalities like permissions, notifications & media playback etc. through a mechanism we refer as [platform channels](https://docs.flutter.dev/development/platform-integration/platform-channels).\\r\\nFlutter is a framework in/for Dart programming language, which also allows native-interop with C/C++ through [FFI](https://dart.dev/guides/libraries/c-interop), after-all not having C/C++ interop capability for any language/framework will be a really annoying thing.\\r\\n\\r\\nNow to the actual mess, before Android 10 i.e. Android 9 or lower, any app that you install on your system could access your phone\'s storage, the directories & various files in it, without any consent (obviously not very privacy friendly).\\r\\n\\r\\n## History & Present\\r\\n\\r\\n- During API 28 or lower (Android 9 or lower), a developer had access to file system.\\r\\n- After API 29 (Android 10), file system access is disabled by default everything is interpreted as `content://` URI instead of `file://`. During this time they provided a special flag to opt out of this stupid miss & use good-old file system methods. See: [`requestLegacyExternalStorage`](https://developer.android.com/training/data-storage/use-cases#opt-out-in-production-app).\\r\\n- After API 20 (Android 11+), you can no longer access `file://` or file-system at all, unless you keep targetting API 29.\\r\\n\\r\\nThis has been done for \\"user privacy\\", but please continue reading till [Here\'s The Point](#heres-the-point).\\r\\n\\r\\nGoogle & Android team thought, it\'s not fun enough so they entirely removed the capability to access, list or read a file/directory using it\'s path. I know it\'s still possible to use file paths using some trickery, but for the most part it has been told by the official documentation to not use file paths at all, when referencing any media or file on the storage. So, what are they recommending? [Scoped Storage](https://www.androidcentral.com/what-scoped-storage) with things like [Storage Access Framework](https://developer.android.com/guide/topics/providers/document-provider) & [MediaStore](https://developer.android.com/reference/android/provider/MediaStore). Let\'s cover these in detail.\\r\\n\\r\\n**NOTE:** Android still allows accessing all of the filesystem (on API 31 or higher), using [`MANAGE_EXTERNAL_STORAGE`](https://support.google.com/googleplay/android-developer/answer/10467955?hl=en). But the chances are, your app will be definitely disqualified from entering Play Store. Only file managers, anti-viruses & backup utilities etc. will be allowed with this permission.\\r\\n\\r\\nAnd you never know, what if they even remove [`MANAGE_EXTERNAL_STORAGE`](https://support.google.com/googleplay/android-developer/answer/10467955?hl=en) in future updates.\\r\\n\\r\\nIn summary, here are few core points:\\r\\n\\r\\n- You cannot access `Android/data` & `Android/obb` of other applications.\\r\\n- You can no longer access any file or directory on user\'s storage without permissions, especially if it\'s not made/created by your app. For sure, a good thing, ask for permission. But, it\'ll just get worse from this point on.\\r\\n- You can no longer ask user to pick a folder & read it\'s contents permanently for displaying inside app. See [ACTION_OPEN_DOCUMENT_TREE](https://developer.android.com/training/data-storage/shared/documents-files#grant-access-directory).\\r\\n  - Even if user gives the permission, you CANNOT access:\\r\\n    - `Downloads` folder. Are you crazy?\\r\\n    -  Internal storage or SD card\'s root directory. How do I look for content matching my app\'s compatibility & requirement?\\r\\n    - Those `Android/data` & `Android/obb` folders.\\r\\n  - Once the user gives you permission, even with above restrictions, it\'s not permanent. How do I update the things inside the app next time user wants to just browse his music library inside my app.\\r\\n- If you want to access any media from user\'s storage, you need to use [MediaStore](https://developer.android.com/reference/android/provider/MediaStore). BUT:\\r\\n  - Google has decided which mime & format is \\"audio\\", which mime & format is a picture, what if it\'s a image in [Quite OK image format](https://github.com/phoboslab/qoi) & I want to show users all photos inside user\'s phone including this format.\\r\\n  - Last time I looked-up, even OGG (OPUS) was not being recognized as an \\"audio\\".\\r\\n  - It\'s like you\'re restricting the creativity. Thinking of your \\"common use-cases\\" as the only possibility in this universe.\\r\\n- According to official team, even if you use file paths & copy etc. operations, they are still delegated to [MediaStore](https://developer.android.com/reference/android/provider/MediaStore) internally, to fuck performance & unnecessarily ruining the speeds.\\r\\n\\r\\n## What\'s Not Good\\r\\n\\r\\nI work on [Harmonoid](https://github.com/harmonoid/harmonoid), a music library manager & player for Windows, Linux & Android. You can expect a lot of internal logic is shared accross all platforms especially related to media indexing & file system handling.\\r\\nAfter Android\'s this migration to it\'s \\"specialized\\" APIs, it renders application obsolete for Android & I have to write same implementation in Kotlin separately along-side existing file-system based implementation to target Android. Not to forget, application still uses a small (~200 lines) of native Kotlin code to invoke [`MediaMetadataRetriever`](https://developer.android.com/reference/android/media/MediaMetadataRetriever) to extract audio data & album arts.\\r\\n\\r\\n- What if I wish to use [taglib](https://github.com/taglib/taglib), a well known tagging libraries in C++ used by VLC & more. Does Android, the open source operating system restricts it\'s usage because it doesn\'t interpret Android\'s stupidity about files/directories?\\r\\n- Currently, one of the unique features of [Harmonoid](https://github.com/harmonoid/harmonoid) is that I have added ability to select multiple folders & include inside music library. This is because no-one wants to see their audio recordings or WhatsApp audios inside a music app, I also hated it.\\r\\n- Most media players lookup for fallback album arts (when an audio file doesn\'t have an embedded one) inside the song\'s directory. See [these lines of VLC\'s C source code](https://code.videolan.org/videolan/vlc/-/blob/master/modules/meta_engine/folder.c#L40-55). Now that file system is gone on Android, how do I handle this.\\r\\n- A core feature of [Harmonoid](https://github.com/harmonoid/harmonoid) is to show available lyrics for the song, this happens by either one of the two:\\r\\n  - Selecting [`.LRC` file](https://en.wikipedia.org/wiki/LRC_(file_format)) manually for a song present inside app. Yeah, it\'s annoying. [Storage Access Framework](https://developer.android.com/guide/topics/providers/document-provider) could likely still support it, since it requires explicit file picking from user & copying to local cache dir.\\r\\n  - Looking for the `.LRC` inside audio file\'s folder (having same name) & loading automatically.\\r\\n- There is no way to efficiently use [MediaStore](https://developer.android.com/reference/android/provider/MediaStore) inside Flutter, even if I wish to switch away from current massively stable & efficient implementation of [package:media_library](https://github.com/alexmercerind/media_library.git). Accessing files, reading metadata tags & displaying album arts in a way that it supports all platforms? Likely impossible according to Android team. See: [flutter/flutter#57380](https://github.com/flutter/flutter/issues/57380).\\r\\n- To make matters worse, both Flutter & Android are from Google & share no \\"compatiblity\\". \\r\\n\\r\\n**I\'m sure there are many many other awesome & creative apps (which utilise a common thing as filesystem to build a unique experience), will all be kicked out of Play Store now. Thinking uniquely is slowly being disregarded on this planet now.**\\r\\n\\r\\n\\r\\n## Here\'s The Point\\r\\n\\r\\n_Google & it\'s Android is the REAL THREAT TO USER PRIVACY, not some passionate application developer building a good digital experience for users while not even possibly requesting internet permission. I never know when my microphone or camera is active or being recorded to feed your advertising system._\\r\\n\\r\\nOne of the biggest reasons I liked Android over iOS was it\'s open-ness & ability to anything. Looks like there\'s going to be a big demand of [Linux smartphones](https://itsfoss.com/linux-phones/) in the market soon. I don\'t want yet another iOS.\\r\\n\\r\\n- Stop (Android OS & Google) deciding which file/format extension is for what usage.\\r\\n- Stop deciding what\'s a media format & what\'s not.\\r\\n- Stop abstracting file system, directories & files. Everyone has great idea of how files work, both users & developers.\\r\\n\\r\\nOkay, privacy is a good thing. BUT, why on earth is it implemented using [Storage Access Framework](https://developer.android.com/guide/topics/providers/document-provider) & [MediaStore](https://developer.android.com/reference/android/provider/MediaStore). I don\'t want these garbage services to run in background & iterate over my file directories to update their entries of available media automatically. Why you couldn\'t:\\r\\n\\r\\n**Just restrict access to file contents or file system unless user consented (probably based on mime or file-extension), while keeping filesystem API usage available. As simple as that.**\\r\\n\\r\\nWhat an actual API desigining... \ud83e\udd13\\r\\n\\r\\nAs a user, I think everyone quite literally understands & knows what a directory structure & file system looks like. I cannot comprehend what\'s the necessity to build these unnecessary abstractions over the normal file-system access like every operating system provides.\\r\\nNot providing developers access to thing as common as file-system, you\'re simply breaking the norm. This simply means that you can\'t use your existing logic, code & libraries which you use for other platforms. Since I\'m a Flutter developer, I believe in unifying the APIs & being as less platform specific as possible.\\r\\n\\r\\n## Side Effects\\r\\n\\r\\nJust wanted to include this section & it\'s bit of personal too (just like this blogging page).\\r\\n\\r\\n- If you recently observed, images & videos from WhatsApp are no longer visible in your Phone\'s gallery & there is no `WhatsApp` folder in your storage either (where it used to).\\r\\n  - [Scoped Storage](https://developer.android.com/about/versions/11/privacy/storage) is the cause. I can no longer copy/move the documents my friends/college sent me.\\r\\n  - To make matters worse, it\'s quite literally impossible to select multiple documents from WhatsApp & attach it to an e-mail.\\r\\n  - You gotta go through those [`ACTION_OPEN_DOCUMENT`](https://developer.android.com/guide/topics/providers/document-provider)s couple of times.\\r\\n- One of my friend plays the game [Mobile Legends](https://play.google.com/store/apps/details?id=com.mobile.legends&hl=en_IN&gl=US).\\r\\n  - According to him, the game fetches a large numer of in-game assets (around 5-6 GB) for skins, textures etc.\\r\\n  - Since downloading these files on every device is redundant & essentially wastage of internet connection, he & his friends used to share these \\"assets\\" & copy at required locations on multiple devices from one device (where it was downloaded).\\r\\n  - This is no longer possible, atleast the copy speeds are really slow as compared to pre API 29.\\r\\n  - This essentially shows, how in-efficient & unfriendly this redundantly made implementation built into the operating system is.\\r\\n\\r\\nWhat a degradation.\\r\\n\\r\\n\\r\\n## End Notes\\r\\n\\r\\nAs I said at the beginning of this, I\'m actually a Flutter developer & mainly I have experience in Windows & Linux application development & their native APIs.\\r\\n\\r\\nFrom my experience (so far) working with other Flutter developers & being part of community, I don\'t think average or even intermediate Flutter developer has any knowledge of device-specific APIs & garbage like [Storage Access Framework](https://developer.android.com/guide/topics/providers/document-provider) & [MediaStore](https://developer.android.com/reference/android/provider/MediaStore) at all (because these are part of Android SDK).\\r\\n\\r\\nThis means re-writing all the functionality specifically for Android separately because APIs from [`dart:io`](https://api.flutter.dev/flutter/dart-io/dart-io-library.html) or libraries written completely in Dart or leveraging FFI likely won\'t work at all for your purpose.\\r\\n\\r\\nWorking with Android SDK has always been painful, deprecated APIs left & right after every release. As someone who never was into Android development specifically, you have no clear idea where to begin & where to end. Jetpack Compose, XML, Kotlin, Java alongside these random things like content-provider, content-resolver, media-store, SAF being added for no reason, while core things like file system handling being removed from the operating system & API.\\r\\n\\r\\nFor now, I have zero motivation to migrate to this \\"new & better\\" API which will take away many cool features of my application. Let\'s see if I have to open Android Studio & contribute to global warming while running it.\\r\\n\\r\\nThanks for reading! No features this year, just refactor."},{"id":"animations-in-flutter-done-right","metadata":{"permalink":"/blog/animations-in-flutter-done-right","source":"@site/blog/2022-06-09-animations-in-flutter-done-right.md","title":"Animations in Flutter done right [Flutter 2 & 3]","description":"Animations on things drawn on screen & sense of motion that drives the attention of users is really important for a good user experience.","date":"2022-06-09T00:00:00.000Z","formattedDate":"June 9, 2022","tags":[{"label":"flutter","permalink":"/blog/tags/flutter"},{"label":"animations","permalink":"/blog/tags/animations"},{"label":"dart","permalink":"/blog/tags/dart"}],"readingTime":10.12,"truncated":true,"authors":[{"name":"Hitesh","title":"Flutter & React.js developer. Writes C++, Dart, JS & Python. Maintains few utility libraries. Beautiful UI <3","url":"https://github.com/alexmercerind","imageURL":"https://github.com/alexmercerind.png","key":"alexmercerind"}],"frontMatter":{"slug":"animations-in-flutter-done-right","authors":"alexmercerind","title":"Animations in Flutter done right [Flutter 2 & 3]","tags":["flutter","animations","dart"]},"prevItem":{"title":"Messed up storage access since Android 11","permalink":"/blog/messed-up-storage-access-since-android-11"},"nextItem":{"title":"C++\'s <future>, making async C callbacks functions sync & enjoyable multi-threading","permalink":"/blog/cpp-future-async-sync-multi-threading"}},"content":"Animations on things drawn on screen & sense of motion that drives the attention of users is really important for a good user experience.\\n\\n\x3c!--truncate--\x3e\\n\\nSince [Flutter](https://flutter.dev/) draws everything pixel-by-pixel, it offers a lot of ways by which a really-really rich experience can be achieved either it be animations, painting something entirely custom or customization options available to existing `Widget`s.\\n\\n## The 5 Ways\\n\\nTo me, there are five ways by which animations can be achieved in Flutter. They are:\\n\\nThe first two fall in the category of implicit animations. The third & the last one are explicit animations.\\n\\n:::tip\\n**In a common & simple case, the first two will be enough for your purpose !!!**\\n:::\\n\\n| Animation Type                                                                                                                                                                                                                                                                                                                                                                                                          | When To Use                                                                                                                                                                                                                                                                                                                              | Possible Cases                                                                                                                                                                                                                                                                                                              |\\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| `AnimatedXYZ` `Widget`s e.g. [`AnimatedContainer`](https://api.flutter.dev/flutter/widgets/AnimatedContainer-class.html), [`AnimatedOpacity`](https://api.flutter.dev/flutter/widgets/AnimatedOpacity-class.html), [`AnimatedScale`](https://api.flutter.dev/flutter/widgets/AnimatedScale-class.html), [`AnimatedRotation`](https://api.flutter.dev/flutter/widgets/AnimatedRotation-class.html) etc.                  | 1. Your animation is simple & operates only between discrete values e.g. from one value to another & then another.<br/>2. You don\'t want to listen the current animation position / percentage.<br/>3. There is no need of pausing / playing the animation.                                                                              | 1. Changing height of a `Container` from `32.0` to `156.0` with given duration & curve.<br/> 2. Increasing a scale of something upon tap/hover.<br/>3. Changing color to another color.                                                                                                                                     |\\n| [`TweenAnimationBuilder`](https://api.flutter.dev/flutter/widgets/TweenAnimationBuilder-class.html)                                                                                                                                                                                                                                                                                                                     | 1. You want to start your animation when your `Widget` is mounted.<br/>2. There is no requirement of listening to current animation position / percentage.<br/>3. There is no need of pausing / playing the animation.<br/>4. Existing `AnimatedXYZ` in Flutter aren\'t enough for your purpose.<br/>4. Works inside StatelessWidget.     | 1. Something that needs to be animated as soon as drawn to screen.<br/>2. Animating `Color` of something, see [`ColorTween`](https://api.flutter.dev/flutter/animation/ColorTween-class.html).                                                                                                                              |\\n| [`AnimationController`](https://api.flutter.dev/flutter/animation/AnimationController-class.html) + `XYZTransition` `Widget`s e.g. [`SlideTransition`](https://api.flutter.dev/flutter/widgets/SlideTransition-class.html), [`RotationTransition`](https://api.flutter.dev/flutter/widgets/RotationTransition-class.html), [`ScaleTransition`](https://api.flutter.dev/flutter/widgets/ScaleTransition-class.html) etc. | 1. You want to have strong control over the animation<br/>2. You need capablity of playing / pausing the animation<br/>3.You need access to current animation progress / percentage e.g. controlling another animation.<br/>4. More complex stuff / configuration in your animation.<br/>5. You possibly wanna repeat your animation upon completion (not mandatory). | Something very unique or some animated UI component with a lot of stuff going on in it.                                                                                                                                                                                                                                     |\\n| [`AnimationController`](https://api.flutter.dev/flutter/animation/AnimationController-class.html) + `AnimatedBuilder` / `AnimatedWidget`                                                                                                                                                                                                                                                                                | 1. You want to animate such UI property which is not already available as `XYZTransition` in Flutter.<br/>2. All same requirements as above one.                                                                                                                                                                                         | Likely, noone of the above options fit your needs & you wish to animate any arbitrary Flutter property of a `Widget` which isn\'t present as `AnimatedXYZ` or `XYZTransition` in Flutter.<br/>THOUGH, most options like scale, rotation, color, slide are already present. You should decide if you really want to use this. |\\n| [`Hero`](https://youtu.be/Be9UH1kXFDw) widget                                                                                                                                                                                                                                                                                | You need to animate an element between two screens as user navigates to the second screen from first one. This is very common & brings a nice experience to the navigation.                                                                                                                                                                                         | Most simple of all, just same `tag` to both `Hero` widgets wrapping the element you want to animate, one on the first screen & another on the screen you\'re navigating to. |\\n\\n## Few Other Things\\n\\nTwo primary things that you\'d generally define for any kind of animation are:\\n\\n- The time that it takes to complete the animation. a.k.a `duration`.\\n- The curve (NOT the path, but how much percent of animation should be completed with respect to time at a given moment) that the animation should follow. a.k.a `curve`. See [THIS](https://api.flutter.dev/flutter/animation/Curves-class.html).\\n\\nOther than this, we will be definitely providing the width / scale / rotation / color etc. values between which the animation should take place.\\n\\n## Show Me Code\\n\\n:::info\\n\\nAll the code snippets present here are complete & can be run just by copying & pasting a snippet entirely.\\n\\n:::\\n\\n### AnimatedContainer & friends\\n\\nHere, you just need to use any of [`AnimatedContainer`](https://api.flutter.dev/flutter/widgets/AnimatedContainer-class.html), [`AnimatedOpacity`](https://api.flutter.dev/flutter/widgets/AnimatedOpacity-class.html), [`AnimatedScale`](https://api.flutter.dev/flutter/widgets/AnimatedScale-class.html), [`AnimatedRotation`](https://api.flutter.dev/flutter/widgets/AnimatedRotation-class.html) etc. Find more of these with the help of intellisense in your code editor or on [flutter.dev](https://flutter.dev/docs).\\n\\n:::tip\\n\\nIf you know how to use `setState`, you already know how this works.\\n\\n:::\\n\\nExample below shows `AnimatedRotation`, `AnimatedScale`, `AnimatedContainer` & `AnimatedSlide`.\\n\\n<video controls autoplay style={{\\"max-width\\": \\"100%\\"}} src={require(\'@site/static/img/animations-1.mp4\').default}></video>\\n\\n```dart\\nimport \'dart:math\';\\n\\nimport \'package:flutter/material.dart\';\\n\\nvoid main() => runApp(const MyApp());\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return const MaterialApp(\\n      home: MyHomePage(),\\n    );\\n  }\\n}\\n\\nclass MyHomePage extends StatefulWidget {\\n  const MyHomePage({Key? key}) : super(key: key);\\n\\n  @override\\n  State<MyHomePage> createState() => _MyHomePageState();\\n}\\n\\nclass _MyHomePageState extends State<MyHomePage> {\\n  double turns = 0.0;\\n  double scale = 1.0;\\n  Color color = Colors.blue;\\n  Offset offset = Offset.zero;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(title: const Text(\'animations\')),\\n      body: Column(\\n        mainAxisAlignment: MainAxisAlignment.center,\\n        children: [\\n          Container(\\n            alignment: Alignment.center,\\n            height: 64.0,\\n            padding: const EdgeInsets.all(12.0),\\n            child: Row(\\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\\n              children: [\\n                ElevatedButton(\\n                  onPressed: () {\\n                    setState(() {\\n                      turns += 1;\\n                    });\\n                  },\\n                  child: const Text(\'AnimatedRotation\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    setState(() {\\n                      scale = scale == 1.0 ? 1.5 : 1.0;\\n                    });\\n                  },\\n                  child: const Text(\'AnimatedScale\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    setState(() {\\n                      color = Color.fromARGB(\\n                        255,\\n                        Random().nextInt(256),\\n                        Random().nextInt(256),\\n                        Random().nextInt(256),\\n                      );\\n                    });\\n                  },\\n                  child: const Text(\'AnimatedContainer\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    setState(() {\\n                      offset = offset == Offset.zero\\n                          ? const Offset(1.0, 1.0)\\n                          : Offset.zero;\\n                    });\\n                  },\\n                  child: const Text(\'AnimatedSlide\'),\\n                ),\\n              ],\\n            ),\\n          ),\\n          Expanded(\\n            child: Center(\\n              child: AnimatedSlide(\\n                offset: offset,\\n                duration: const Duration(milliseconds: 800),\\n                child: AnimatedScale(\\n                  scale: scale,\\n                  duration: const Duration(milliseconds: 800),\\n                  child: AnimatedRotation(\\n                    turns: turns,\\n                    duration: const Duration(milliseconds: 800),\\n                    // Animate any properties on the AnimatedContainer.\\n                    child: AnimatedContainer(\\n                      duration: const Duration(milliseconds: 800),\\n                      curve: Curves.easeInOut,\\n                      height: 96.0,\\n                      width: 96.0,\\n                      color: color,\\n                    ),\\n                  ),\\n                ),\\n              ),\\n            ),\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n```\\n\\n### TweenAnimationBuilder\\n\\nTakes a [`Tween`](https://api.flutter.dev/flutter/animation/Tween-class.html) and a [`Widget`](https://api.flutter.dev/flutter/widgets/Widget-class.html) and animates the [`Widget`](https://api.flutter.dev/flutter/widgets/Widget-class.html) according to the [`Tween`](https://api.flutter.dev/flutter/animation/Tween-class.html) you provide. [`Tween`](https://api.flutter.dev/flutter/animation/Tween-class.html) actually defines a range of values defined by a `begin` and an `end`. These values may be `double` or even `Color`.\\n\\n`TweenAnimationBuilder` automatically animates on mount & whenever the `Tween` changes due to `setState` etc.\\n\\n<video controls autoplay style={{\\"max-width\\": \\"100%\\"}} src={require(\'@site/static/img/animations-2.mp4\').default}></video>\\n\\n:::tip\\n\\nNotice how animation is automatically played on mount & changing the `Tween` causes the animation to continue from that point to new value.\\n\\n:::\\n\\nNotice the large number of methods & properties that are available to highly customize the animation.\\n\\n```dart\\nimport \'package:flutter/material.dart\';\\n\\nvoid main() => runApp(const MyApp());\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return const MaterialApp(\\n      home: MyHomePage(),\\n    );\\n  }\\n}\\n\\nclass MyHomePage extends StatefulWidget {\\n  const MyHomePage({Key? key}) : super(key: key);\\n\\n  @override\\n  State<MyHomePage> createState() => _MyHomePageState();\\n}\\n\\nclass _MyHomePageState extends State<MyHomePage> {\\n  double end = 1.0;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(title: const Text(\'animations\')),\\n      body: Column(\\n        mainAxisAlignment: MainAxisAlignment.center,\\n        children: [\\n          Container(\\n            alignment: Alignment.center,\\n            height: 64.0,\\n            padding: const EdgeInsets.all(12.0),\\n            child: Row(\\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\\n              children: [\\n                ElevatedButton(\\n                  onPressed: () {\\n                    setState(() {\\n                      end = end == 0.0 ? 1.0 : 0.0;\\n                    });\\n                  },\\n                  child: Text(\'Tween<double>.end = ${end == 0.0 ? 1.0 : 0.0}\'),\\n                ),\\n              ],\\n            ),\\n          ),\\n          Expanded(\\n            child: Center(\\n              child: TweenAnimationBuilder<double>(\\n                tween: Tween<double>(begin: 0.0, end: end),\\n                duration: const Duration(milliseconds: 400),\\n                builder: (context, value, child) => Transform.scale(\\n                  scale: value,\\n                  child: Container(\\n                    height: 256.0,\\n                    width: 256.0,\\n                    alignment: Alignment.center,\\n                    color: Colors.blue,\\n                    child: child,\\n                  ),\\n                ),\\n                // Widget passed as child will not be redrawn when the animation is updated.\\n                child: const Text(\\n                  \'This text is not being redrawn.\',\\n                  style: TextStyle(color: Colors.white),\\n                ),\\n              ),\\n            ),\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n```\\n\\n### AnimationController & XYZTransition Widgets\\n\\nExistence of an `AnimationController` itself gives a lot of configurable options & other features.\\n\\n:::warning\\n\\nFor using `AnimationController` in your `Widget`, you need to use `TickerProviderStateMixin` or `SingleTickerProviderStateMixin` (if there\'s only one `AnimationController` animation).\\n\\ne.g.\\n\\n**From:**\\n\\n```dart\\nclass _MyHomePageState extends State<MyHomePage> {\\n```\\n\\n**To:**\\n\\n```dart\\nclass _MyHomePageState extends State<MyHomePage> with SingleTickerProviderStateMixin {\\n```\\n\\n:::\\n\\n<video controls autoplay style={{\\"max-width\\": \\"100%\\"}} src={require(\'@site/static/img/animations-3.mp4\').default}></video>\\n\\n```dart\\nimport \'package:flutter/material.dart\';\\n\\nvoid main() => runApp(const MyApp());\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return const MaterialApp(\\n      home: MyHomePage(),\\n    );\\n  }\\n}\\n\\nclass MyHomePage extends StatefulWidget {\\n  const MyHomePage({Key? key}) : super(key: key);\\n\\n  @override\\n  State<MyHomePage> createState() => _MyHomePageState();\\n}\\n\\nclass _MyHomePageState extends State<MyHomePage>\\n    with SingleTickerProviderStateMixin {\\n  late AnimationController animationController;\\n\\n  @override\\n  void initState() {\\n    super.initState();\\n    animationController = AnimationController(\\n      vsync: this,\\n      lowerBound: 0.0,\\n      upperBound: 2.2,\\n      duration: const Duration(seconds: 1),\\n      reverseDuration: const Duration(seconds: 1),\\n    );\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(title: const Text(\'animations\')),\\n      body: Column(\\n        mainAxisAlignment: MainAxisAlignment.center,\\n        children: [\\n          Container(\\n            alignment: Alignment.center,\\n            height: 64.0,\\n            padding: const EdgeInsets.all(12.0),\\n            child: Row(\\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\\n              children: [\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.forward();\\n                  },\\n                  child: const Text(\'Forward\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.reverse();\\n                  },\\n                  child: const Text(\'Reverse\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.stop();\\n                  },\\n                  child: const Text(\'Stop\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.reset();\\n                  },\\n                  child: const Text(\'Reset\'),\\n                ),\\n              ],\\n            ),\\n          ),\\n          Expanded(\\n            child: Center(\\n              child: RotationTransition(\\n                turns: animationController,\\n                child: Container(\\n                  height: 96.0,\\n                  width: 96.0,\\n                  color: Colors.red,\\n                ),\\n              ),\\n            ),\\n          ),\\n          // Just for demo.\\n          AnimationControllerStateViewer(\\n            animationController: animationController,\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n\\n/// Just to show the available properties in the [AnimationController] class.\\n\\nclass AnimationControllerStateViewer extends StatefulWidget {\\n  final AnimationController animationController;\\n  const AnimationControllerStateViewer({\\n    Key? key,\\n    required this.animationController,\\n  }) : super(key: key);\\n\\n  @override\\n  AnimationControllerStateViewerState createState() =>\\n      AnimationControllerStateViewerState();\\n}\\n\\nclass AnimationControllerStateViewerState\\n    extends State<AnimationControllerStateViewer> {\\n  @override\\n  void initState() {\\n    super.initState();\\n    // Redraw this widget to show updated properties.\\n    widget.animationController.addListener(() {\\n      setState(() {});\\n    });\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Container(\\n      padding: const EdgeInsets.all(12.0),\\n      width: double.infinity,\\n      height: 156.0,\\n      child: Column(\\n        crossAxisAlignment: CrossAxisAlignment.start,\\n        children: [\\n          Text(\\n            \'animationController.isAnimating: ${widget.animationController.isAnimating}\',\\n          ),\\n          Text(\\n            \'animationController.isCompleted: ${widget.animationController.isCompleted}\',\\n          ),\\n          Text(\\n            \'animationController.isDismissed: ${widget.animationController.isDismissed}\',\\n          ),\\n          Text(\\n            \'animationController.status: ${widget.animationController.status}\',\\n          ),\\n          Text(\\n            \'animationController.value: ${widget.animationController.value}\',\\n          ),\\n          Text(\\n            \'animationController.velocity: ${widget.animationController.velocity}\',\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n```\\n\\n:::tip\\n\\nIf you noticed, there\'s actually no `curve` argument in `AnimationController`. You need to use [`CurvedAnimation`](https://api.flutter.dev/flutter/animation/CurvedAnimation-class.html) together.\\n\\n```dart\\nlate AnimationController animationController;\\nlate Animation<double> animation;\\n\\n@override\\nvoid initState() {\\n  super.initState();\\n  animationController = AnimationController(\\n    vsync: this,\\n    duration: const Duration(seconds: 1),\\n    reverseDuration: const Duration(seconds: 1),\\n  );\\n  animation = Tween<double>(begin: 0.0, end: 2.0).animate(\\n    CurvedAnimation(\\n      curve: Curves.easeInOut,\\n      reverseCurve: Curves.easeInCirc,\\n      parent: animationController,\\n    ),\\n  );\\n}\\n```\\n\\nIn above example, just use `CurvedAnimation` with `Tween<T>.animate` and then pass `animation` as the `turns` in `RotationTransition` instead of `animationController` itself.\\n\\n:::\\n\\n### AnimationController & AnimatedBuilder / AnimatedWidget\\n\\nThis should be only used when you wish to animate a Flutter `Widget` property which is not already present as `XYZTransition` in the Flutter framework.\\n\\n**Here, I\'ll be animating `fontSize` of a `Text`.**\\n\\nThough, it would\'ve been better to use `ScaleTransition` instead!\\n\\n<video controls autoplay style={{\\"max-width\\": \\"100%\\"}} src={require(\'@site/static/img/animations-4.mp4\').default}></video>\\n\\n```dart\\nimport \'package:flutter/material.dart\';\\n\\nvoid main() => runApp(const MyApp());\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return const MaterialApp(\\n      home: MyHomePage(),\\n    );\\n  }\\n}\\n\\nclass MyHomePage extends StatefulWidget {\\n  const MyHomePage({Key? key}) : super(key: key);\\n\\n  @override\\n  State<MyHomePage> createState() => _MyHomePageState();\\n}\\n\\nclass _MyHomePageState extends State<MyHomePage>\\n    with SingleTickerProviderStateMixin {\\n  late AnimationController animationController;\\n\\n  @override\\n  void initState() {\\n    super.initState();\\n    animationController = AnimationController(\\n      vsync: this,\\n      lowerBound: 16.0,\\n      upperBound: 24.0,\\n      duration: const Duration(seconds: 1),\\n      reverseDuration: const Duration(seconds: 1),\\n    );\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(title: const Text(\'animations\')),\\n      body: Column(\\n        mainAxisAlignment: MainAxisAlignment.center,\\n        children: [\\n          Container(\\n            alignment: Alignment.center,\\n            height: 64.0,\\n            padding: const EdgeInsets.all(12.0),\\n            child: Row(\\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\\n              children: [\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.forward();\\n                  },\\n                  child: const Text(\'Forward\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.reverse();\\n                  },\\n                  child: const Text(\'Reverse\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.stop();\\n                  },\\n                  child: const Text(\'Stop\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.reset();\\n                  },\\n                  child: const Text(\'Reset\'),\\n                ),\\n              ],\\n            ),\\n          ),\\n          Expanded(\\n            child: Center(\\n              child: AnimatedBuilder(\\n                animation: animationController,\\n                builder: (context, child) => Text(\\n                  \'Well, this is a text.\',\\n                  style: TextStyle(\\n                    fontSize: animationController.value,\\n                    fontWeight: FontWeight.w700,\\n                  ),\\n                ),\\n              ),\\n            ),\\n          ),\\n          // Just for demo.\\n        ],\\n      ),\\n    );\\n  }\\n}\\n```\\n\\n### End Notes\\n\\nEven though, the examples shown above are quite simple, they show most of the things which are available to animate a Flutter `Widget` in your own way.\\n\\nA lot of animations can be combined together to create a complex animation. A listener can be added to `AnimationController` to listen to various events & possibly alter the curve, duration or any other property of animation in the middle of animation itself etc. Endless possibilities are there!\\n\\nFew of the properties were shown in the [AnimationController & XYZTransition Widgets](#animationcontroller--xyztransition-widgets) video.\\n\\nSo, these are my tips on adding animations in a Flutter app."},{"id":"cpp-future-async-sync-multi-threading","metadata":{"permalink":"/blog/cpp-future-async-sync-multi-threading","source":"@site/blog/2022-05-21-cpp-future-async-sync-multi-threading.md","title":"C++\'s <future>, making async C callbacks functions sync & enjoyable multi-threading","description":"I use `` header in C++ very-very often in my code everywhere at this point & wanted to share what\'s so cool in it.","date":"2022-05-21T00:00:00.000Z","formattedDate":"May 21, 2022","tags":[{"label":"c++","permalink":"/blog/tags/c"},{"label":"std::async","permalink":"/blog/tags/std-async"},{"label":"multi-threading","permalink":"/blog/tags/multi-threading"},{"label":"async","permalink":"/blog/tags/async"}],"readingTime":5.83,"truncated":true,"authors":[{"name":"Hitesh","title":"Flutter & React.js developer. Writes C++, Dart, JS & Python. Maintains few utility libraries. Beautiful UI <3","url":"https://github.com/alexmercerind","imageURL":"https://github.com/alexmercerind.png","key":"alexmercerind"}],"frontMatter":{"slug":"cpp-future-async-sync-multi-threading","authors":"alexmercerind","title":"C++\'s <future>, making async C callbacks functions sync & enjoyable multi-threading","tags":["c++","std::async","multi-threading","async"]},"prevItem":{"title":"Animations in Flutter done right [Flutter 2 & 3]","permalink":"/blog/animations-in-flutter-done-right"}},"content":"I use [`<future>`](https://cplusplus.com/reference/future) header in C++ very-very often in my code everywhere at this point & wanted to share what\'s so cool in it.\\n\\n\x3c!--truncate--\x3e\\n\\nGenerally, I don\'t really like classic way of handling `Thread`s, so much to worry about, spawning, running or joining. Even though, _nearly_ every language has that POSIX-like API.\\n\\nWhat I find more elegant is:\\n\\n- C#/.NET\'s `async`, `await` or `Task`\\n- JavaScript\'s `async`, `await` or `Promise` (I know JS is single-threaded, but still)\\n- Dart\'s `async`, `await` or `Future` (again, not actually \\"multi-threading\\").\\n\\nI got to know about `std::future` and `std::promise` in C++ 11 few years back & they\'re quite the same in terms of how they\'re used in code. My happiness couldn\'t be greater.\\n\\nJust see how elegant this looks:\\n\\n### Code\\n\\nUse `std::async` function to spawn a new thread and pass a function to it.\\n\\n```cpp\\n#include <future>\\n#include <iostream>\\n\\nint32_t main() {\\n\\n  auto future = std::async([&]() {\\n    std::cout << \\"A std::future came to life!\\\\n\\";\\n    std::this_thread::sleep_for(std::chrono::seconds(2));\\n    std::cout << \\"Hello from std::future & I\'m 2 seconds late!\\\\n\\";\\n  });\\n\\n  std::this_thread::sleep_for(std::chrono::seconds(1));\\n  std::cout << \\"Hey, I\'ll be first on the console!\\\\n\\";\\n  return 0;\\n}\\n```\\n\\nDon\'t let that capturing lambda confuse you.\\n\\nSomething like this will be up on your terminal:\\n\\n```cmd\\nA std::future came to life!\\nHey, I\'ll be first on the console!\\nHello from std::future & I\'m 2 seconds late!\\n```\\n\\n:::warning\\n\\nAlways keep a reference accessible to the `std::future` returned by the `std::async`.\\nOtherwise, your function passed will not launch on separate thread & just execute sync-ly.\\n\\nThe other day, I was spawning `std::future`s to do various things concurrently in a `for-loop` and noticed that everything was being executed synchronously. Then I came to know that I need to store their reference somewhere to be able to access them later. Added a `std::vector<std::future<void>>` in my case (where I pushed all returned `std::future`s).\\n\\nHere let\'s just remove the `future` variable from above code:\\n\\n```cpp\\n#include <future>\\n#include <iostream>\\n\\nint32_t main() {\\n  std::async([&]() {\\n    std::cout << \\"A std::future came to life!\\\\n\\";\\n    std::this_thread::sleep_for(std::chrono::seconds(2));\\n    std::cout << \\"Hello from std::future & I\'m 2 seconds late!\\\\n\\";\\n  });\\n\\n  std::this_thread::sleep_for(std::chrono::seconds(1));\\n  std::cout << \\"Hey, I\'ll be first on the console!\\\\n\\";\\n  return 0;\\n}\\n```\\n\\nNotice how \\"Hey, I\'ll be first on the console!\\" came in last. Something we didn\'t expect.\\n\\nTakes away the whole purpose.\\n\\n```\\nA std::future came to life!\\nHello from std::future & I\'m 2 seconds late!\\nHey, I\'ll be first on the console!\\n```\\n\\n:::\\n\\n### Equivalents in HLL Dart or JavaScript\\n\\n**How simple is that.** A separate thread launched with `std::async` & do whatever with it. This syntax is quite nice & familiar to how I\'m trained with Dart/JavaScript.\\n\\nTake equivalent Dart for example:\\n\\n```dart\\nvoid main() async {\\n  () async {\\n    print(\'An async function came to life!\');\\n    await Future.delayed(const Duration(seconds: 2));\\n    print(\'Hello from async function & I\\\\\'m 2 seconds late!\');\\n  }();\\n  await Future.delayed(const Duration(seconds: 1));\\n  print(\'Hey, I\\\\\'ll be first on the console!\');\\n}\\n```\\n\\n```\\nAn async function came to life!\\nHey, I\'ll be first on the console!\\nHello from async function & I\'m 2 seconds late!\\n```\\n\\nThis [`std::future`](https://cplusplus.com/reference/future/future/) stuff in C++ now may seem really cool to you, but I still haven\'t noticed any analog of [`Promise.all`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) from JavaScript in it yet.\\n\\nThough, simple thread create/start/join API, is also good in some situations like doing event-polling in background or just spinning up something consistently while UI is visible. Other than that, it just becomes a pain in my opinion to handle if we have a lot of async operations to worry about & handling of tasks.\\n\\n### Making a C async callback based function sync\\n\\nIf you\'ve written JavaScript, I think you know how some libraries still ask for a function as argument and call it back once some heavy/network-related operation is done. This reminds me of `fs` (callback based filesystem API) and `fs/promise` (`Promise`s based filesystem API) from Node.js. Converting a old callback based API into shiny new async API is something I would do to sooth my soul.\\n\\nAn equivalent for this exists in Dart to make a function sync: [Completer](https://api.dartlang.org/stable/dart-async/Completer-class.html).\\n\\nI had a similar situation in C/C++, [where I needed to \\"wait\\" for some async operation to finish before I could return the result from my function](https://github.com/alexmercerind/dart_vlc/blob/3b0571743f0ed2f90aa52ab92e955b55cd10d0dd/core/media_source/media.cc#L84-L87). I didn\'t know any solution but [`std::promise`](https://en.cppreference.com/w/cpp/thread/promise) from [`<future>`](https://cplusplus.com/reference/future/) came in very-very handy.\\n\\n**Let\'s take this code:**\\n\\nWe want to wait for the value that is being returned from `a_long_running_function_that_returns_result_in_callback` inside callback from another thread before proceeding to print `\\"This should not execute early!!!\\\\n\\"` on console.\\n\\n```cpp\\n#include <future>\\n#include <iostream>\\n\\n// Let\'s say we have this function which takes a lot of time to execute &\\n// returns the final result in the passed [callback] from another thread.\\n// I\'m sure a lot of C/C++ librares like this are in existence.\\n//\\n// We need to wait for the result outside the passed callback.\\n//\\n// A place to demonstrate awesomeness of `std::promise`.\\nvoid a_long_running_function_that_returns_result_in_callback(\\n    void (*callback)(int)) {\\n  std::thread([=]() {\\n    std::this_thread::sleep_for(std::chrono::seconds(1));\\n    callback(69420);\\n  }).detach();\\n}\\n\\nvoid print_the_value(int value) {\\n  std::cout << \\"The value is: \\" << value << \\"\\\\n\\";\\n}\\n\\nvoid main() {\\n  a_long_running_function_that_returns_result_in_callback(print_the_value);\\n  std::cout << \\"This should not execute early!!!\\\\n\\";\\n  std::cin.get();\\n}\\n```\\n\\nOutput of this on your terminal will be:\\n\\n```\\nThis should not execute early!!!\\nThe value is: 69420\\n```\\n\\nThe order is clearly messed up.\\n\\n**Let\'s bring [`std::promise`](https://en.cppreference.com/w/cpp/thread/promise) to the rescue:**\\n\\n```cpp\\n#include <future>\\n#include <iostream>\\n\\n// Don\'t kill me for using global variables. C\'mon it\'s C API that we\'re trying\\n// to wrap.\\nauto g_promise = std::promise<int>();\\n\\n// Let\'s say we have this function which takes a lot of time to execute &\\n// returns the final result in the passed [callback] from another thread.\\n// I\'m sure a lot of C/C++ librares like this are in existence.\\n//\\n// We need to wait for the result outside the passed callback.\\n//\\n// A place to demonstrate awesomeness of `std::promise`.\\nvoid a_long_running_function_that_returns_result_in_callback(\\n    void (*callback)(int)) {\\n  std::thread([=]() {\\n    std::this_thread::sleep_for(std::chrono::seconds(1));\\n    callback(69420);\\n  }).detach();\\n}\\n\\nvoid print_the_value(int value) {\\n  std::cout << \\"The value is: \\" << value << \\"\\\\n\\";\\n  // Set the value to the `std::future` corresponding to the promise.\\n  // Cause the wait to be over.\\n  g_promise.set_value(value);\\n}\\n\\nvoid main() {\\n  a_long_running_function_that_returns_result_in_callback(print_the_value);\\n  // Wait until the promise is resolved.\\n  g_promise.get_future().wait();\\n  std::cout << \\"This should not execute early!!!\\\\n\\";\\n\\n  std::cin.get();\\n}\\n```\\n\\nNotice how `std::promise::set_value` is called from the callback.\\nThen, `std::future::wait` is called from the main thread to wait for the promise to be resolved.\\n\\nSuch a nice syntax. If you wish to get the value inside [`std::promise`](https://en.cppreference.com/w/cpp/thread/promise) from the callback, you can use [`std::future::get`](https://en.cppreference.com/w/cpp/thread/future/get) instead of the [`std::future::wait`](https://en.cppreference.com/w/cpp/thread/future/wait).\\n\\n```cpp\\nint a_long_running_function_that_returns_same_result_without_callback() {\\n  a_long_running_function_that_returns_result_in_callback(print_the_value);\\n  // Wait until the promise is resolved & return from this wrapper function.\\n  return g_promise.get_future().get();\\n}\\n\\nvoid main() {\\n  std::cout\\n      << \\"Returned value: \\"\\n      << a_long_running_function_that_returns_same_result_without_callback()\\n      << \\"\\\\n\\";\\n  std::cin.get();\\n}\\n```\\n\\nThere are also following things to note, which one may find useful:\\n\\n- [`std::future::wait_for`](https://en.cppreference.com/w/cpp/thread/future/wait_for).\\n- [`std::future::wait_until`](https://en.cppreference.com/w/cpp/thread/future/wait_until).\\n\\nDon\'t spam Rust is better in comments (oh, there are no comments right now). I\'m staying with C++ for now."}]}')}}]);