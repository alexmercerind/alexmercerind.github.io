"use strict";(self.webpackChunkalexmercerind_github_io=self.webpackChunkalexmercerind_github_io||[]).push([[477],{10:function(n){n.exports=JSON.parse('{"blogPosts":[{"id":"animations-in-flutter-done-right","metadata":{"permalink":"/blog/animations-in-flutter-done-right","source":"@site/blog/2022-06-09-animations-in-flutter-done-right.md","title":"Animations in Flutter done right [Flutter 2 & 3]","description":"Animations on things drawn on screen & sense of motion that drives the attention of users is really important for a good user experience.","date":"2022-06-09T00:00:00.000Z","formattedDate":"June 9, 2022","tags":[{"label":"flutter","permalink":"/blog/tags/flutter"},{"label":"animations","permalink":"/blog/tags/animations"},{"label":"dart","permalink":"/blog/tags/dart"}],"readingTime":10.12,"truncated":true,"authors":[{"name":"Hitesh","title":"Flutter & React.js developer. Writes C++, Dart, JS & Python. Maintains few utility libraries. Beautiful UI <3","url":"https://github.com/alexmercerind","imageURL":"https://github.com/alexmercerind.png","key":"alexmercerind"}],"frontMatter":{"slug":"animations-in-flutter-done-right","authors":"alexmercerind","title":"Animations in Flutter done right [Flutter 2 & 3]","tags":["flutter","animations","dart"]},"nextItem":{"title":"C++\'s <future>, making async C callbacks functions sync & enjoyable multi-threading","permalink":"/blog/cpp-future-async-sync-multi-threading"}},"content":"Animations on things drawn on screen & sense of motion that drives the attention of users is really important for a good user experience.\\n\\n\x3c!--truncate--\x3e\\n\\nSince [Flutter](https://flutter.dev/) draws everything pixel-by-pixel, it offers a lot of ways by which a really-really rich experience can be achieved either it be animations, painting something entirely custom or customization options available to existing `Widget`s.\\n\\n## The 5 Ways\\n\\nTo me, there are five ways by which animations can be achieved in Flutter. They are:\\n\\nThe first two fall in the category of implicit animations. The third & the last one are explicit animations.\\n\\n:::tip\\n**In a common & simple case, the first two will be enough for your purpose !!!**\\n:::\\n\\n| Animation Type                                                                                                                                                                                                                                                                                                                                                                                                          | When To Use                                                                                                                                                                                                                                                                                                                              | Possible Cases                                                                                                                                                                                                                                                                                                              |\\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| `AnimatedXYZ` `Widget`s e.g. [`AnimatedContainer`](https://api.flutter.dev/flutter/widgets/AnimatedContainer-class.html), [`AnimatedOpacity`](https://api.flutter.dev/flutter/widgets/AnimatedOpacity-class.html), [`AnimatedScale`](https://api.flutter.dev/flutter/widgets/AnimatedScale-class.html), [`AnimatedRotation`](https://api.flutter.dev/flutter/widgets/AnimatedRotation-class.html) etc.                  | 1. Your animation is simple & operates only between discrete values e.g. from one value to another & then another.<br/>2. You don\'t want to listen the current animation position / percentage.<br/>3. There is no need of pausing / playing the animation.                                                                              | 1. Changing height of a `Container` from `32.0` to `156.0` with given duration & curve.<br/> 2. Increasing a scale of something upon tap/hover.<br/>3. Changing color to another color.                                                                                                                                     |\\n| [`TweenAnimationBuilder`](https://api.flutter.dev/flutter/widgets/TweenAnimationBuilder-class.html)                                                                                                                                                                                                                                                                                                                     | 1. You want to start your animation when your `Widget` is mounted.<br/>2. There is no requirement of listening to current animation position / percentage.<br/>3. There is no need of pausing / playing the animation.<br/>4. Existing `AnimatedXYZ` in Flutter aren\'t enough for your purpose.<br/>4. Works inside StatelessWidget.     | 1. Something that needs to be animated as soon as drawn to screen.<br/>2. Animating `Color` of something, see [`ColorTween`](https://api.flutter.dev/flutter/animation/ColorTween-class.html).                                                                                                                              |\\n| [`AnimationController`](https://api.flutter.dev/flutter/animation/AnimationController-class.html) + `XYZTransition` `Widget`s e.g. [`SlideTransition`](https://api.flutter.dev/flutter/widgets/SlideTransition-class.html), [`RotationTransition`](https://api.flutter.dev/flutter/widgets/RotationTransition-class.html), [`ScaleTransition`](https://api.flutter.dev/flutter/widgets/ScaleTransition-class.html) etc. | 1. You want to have strong control over the animation<br/>2. You need capablity of playing / pausing the animation<br/>3.You need access to current animation progress / percentage e.g. controlling another animation.<br/>4. More complex stuff / configuration in your animation.<br/>5. You possibly wanna repeat your animation upon completion (not mandatory). | Something very unique or some animated UI component with a lot of stuff going on in it.                                                                                                                                                                                                                                     |\\n| [`AnimationController`](https://api.flutter.dev/flutter/animation/AnimationController-class.html) + `AnimatedBuilder` / `AnimatedWidget`                                                                                                                                                                                                                                                                                | 1. You want to animate such UI property which is not already available as `XYZTransition` in Flutter.<br/>2. All same requirements as above one.                                                                                                                                                                                         | Likely, noone of the above options fit your needs & you wish to animate any arbitrary Flutter property of a `Widget` which isn\'t present as `AnimatedXYZ` or `XYZTransition` in Flutter.<br/>THOUGH, most options like scale, rotation, color, slide are already present. You should decide if you really want to use this. |\\n| [`Hero`](https://youtu.be/Be9UH1kXFDw) widget                                                                                                                                                                                                                                                                                | You need to animate an element between two screens as user navigates to the second screen from first one. This is very common & brings a nice experience to the navigation.                                                                                                                                                                                         | Most simple of all, just same `tag` to both `Hero` widgets wrapping the element you want to animate, one on the first screen & another on the screen you\'re navigating to. |\\n\\n## Few Other Things\\n\\nTwo primary things that you\'d generally define for any kind of animation are:\\n\\n- The time that it takes to complete the animation. a.k.a `duration`.\\n- The curve (NOT the path, but how much percent of animation should be completed with respect to time at a given moment) that the animation should follow. a.k.a `curve`. See [THIS](https://api.flutter.dev/flutter/animation/Curves-class.html).\\n\\nOther than this, we will be definitely providing the width / scale / rotation / color etc. values between which the animation should take place.\\n\\n## Show Me Code\\n\\n:::info\\n\\nAll the code snippets present here are complete & can be run just by copying & pasting a snippet entirely.\\n\\n:::\\n\\n### AnimatedContainer & friends\\n\\nHere, you just need to use any of [`AnimatedContainer`](https://api.flutter.dev/flutter/widgets/AnimatedContainer-class.html), [`AnimatedOpacity`](https://api.flutter.dev/flutter/widgets/AnimatedOpacity-class.html), [`AnimatedScale`](https://api.flutter.dev/flutter/widgets/AnimatedScale-class.html), [`AnimatedRotation`](https://api.flutter.dev/flutter/widgets/AnimatedRotation-class.html) etc. Find more of these with the help of intellisense in your code editor or on [flutter.dev](https://flutter.dev/docs).\\n\\n:::tip\\n\\nIf you know how to use `setState`, you already know how this works.\\n\\n:::\\n\\nExample below shows `AnimatedRotation`, `AnimatedScale`, `AnimatedContainer` & `AnimatedSlide`.\\n\\n<video controls autoplay style={{\\"max-width\\": \\"100%\\"}} src={require(\'@site/static/img/animations-1.mp4\').default}></video>\\n\\n```dart\\nimport \'dart:math\';\\n\\nimport \'package:flutter/material.dart\';\\n\\nvoid main() => runApp(const MyApp());\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return const MaterialApp(\\n      home: MyHomePage(),\\n    );\\n  }\\n}\\n\\nclass MyHomePage extends StatefulWidget {\\n  const MyHomePage({Key? key}) : super(key: key);\\n\\n  @override\\n  State<MyHomePage> createState() => _MyHomePageState();\\n}\\n\\nclass _MyHomePageState extends State<MyHomePage> {\\n  double turns = 0.0;\\n  double scale = 1.0;\\n  Color color = Colors.blue;\\n  Offset offset = Offset.zero;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(title: const Text(\'animations\')),\\n      body: Column(\\n        mainAxisAlignment: MainAxisAlignment.center,\\n        children: [\\n          Container(\\n            alignment: Alignment.center,\\n            height: 64.0,\\n            padding: const EdgeInsets.all(12.0),\\n            child: Row(\\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\\n              children: [\\n                ElevatedButton(\\n                  onPressed: () {\\n                    setState(() {\\n                      turns += 1;\\n                    });\\n                  },\\n                  child: const Text(\'AnimatedRotation\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    setState(() {\\n                      scale = scale == 1.0 ? 1.5 : 1.0;\\n                    });\\n                  },\\n                  child: const Text(\'AnimatedScale\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    setState(() {\\n                      color = Color.fromARGB(\\n                        255,\\n                        Random().nextInt(256),\\n                        Random().nextInt(256),\\n                        Random().nextInt(256),\\n                      );\\n                    });\\n                  },\\n                  child: const Text(\'AnimatedContainer\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    setState(() {\\n                      offset = offset == Offset.zero\\n                          ? const Offset(1.0, 1.0)\\n                          : Offset.zero;\\n                    });\\n                  },\\n                  child: const Text(\'AnimatedSlide\'),\\n                ),\\n              ],\\n            ),\\n          ),\\n          Expanded(\\n            child: Center(\\n              child: AnimatedSlide(\\n                offset: offset,\\n                duration: const Duration(milliseconds: 800),\\n                child: AnimatedScale(\\n                  scale: scale,\\n                  duration: const Duration(milliseconds: 800),\\n                  child: AnimatedRotation(\\n                    turns: turns,\\n                    duration: const Duration(milliseconds: 800),\\n                    // Animate any properties on the AnimatedContainer.\\n                    child: AnimatedContainer(\\n                      duration: const Duration(milliseconds: 800),\\n                      curve: Curves.easeInOut,\\n                      height: 96.0,\\n                      width: 96.0,\\n                      color: color,\\n                    ),\\n                  ),\\n                ),\\n              ),\\n            ),\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n```\\n\\n### TweenAnimationBuilder\\n\\nTakes a [`Tween`](https://api.flutter.dev/flutter/animation/Tween-class.html) and a [`Widget`](https://api.flutter.dev/flutter/widgets/Widget-class.html) and animates the [`Widget`](https://api.flutter.dev/flutter/widgets/Widget-class.html) according to the [`Tween`](https://api.flutter.dev/flutter/animation/Tween-class.html) you provide. [`Tween`](https://api.flutter.dev/flutter/animation/Tween-class.html) actually defines a range of values defined by a `begin` and an `end`. These values may be `double` or even `Color`.\\n\\n`TweenAnimationBuilder` automatically animates on mount & whenever the `Tween` changes due to `setState` etc.\\n\\n<video controls autoplay style={{\\"max-width\\": \\"100%\\"}} src={require(\'@site/static/img/animations-2.mp4\').default}></video>\\n\\n:::tip\\n\\nNotice how animation is automatically played on mount & changing the `Tween` causes the animation to continue from that point to new value.\\n\\n:::\\n\\nNotice the large number of methods & properties that are available to highly customize the animation.\\n\\n```dart\\nimport \'package:flutter/material.dart\';\\n\\nvoid main() => runApp(const MyApp());\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return const MaterialApp(\\n      home: MyHomePage(),\\n    );\\n  }\\n}\\n\\nclass MyHomePage extends StatefulWidget {\\n  const MyHomePage({Key? key}) : super(key: key);\\n\\n  @override\\n  State<MyHomePage> createState() => _MyHomePageState();\\n}\\n\\nclass _MyHomePageState extends State<MyHomePage> {\\n  double end = 1.0;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(title: const Text(\'animations\')),\\n      body: Column(\\n        mainAxisAlignment: MainAxisAlignment.center,\\n        children: [\\n          Container(\\n            alignment: Alignment.center,\\n            height: 64.0,\\n            padding: const EdgeInsets.all(12.0),\\n            child: Row(\\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\\n              children: [\\n                ElevatedButton(\\n                  onPressed: () {\\n                    setState(() {\\n                      end = end == 0.0 ? 1.0 : 0.0;\\n                    });\\n                  },\\n                  child: Text(\'Tween<double>.end = ${end == 0.0 ? 1.0 : 0.0}\'),\\n                ),\\n              ],\\n            ),\\n          ),\\n          Expanded(\\n            child: Center(\\n              child: TweenAnimationBuilder<double>(\\n                tween: Tween<double>(begin: 0.0, end: end),\\n                duration: const Duration(milliseconds: 400),\\n                builder: (context, value, child) => Transform.scale(\\n                  scale: value,\\n                  child: Container(\\n                    height: 256.0,\\n                    width: 256.0,\\n                    alignment: Alignment.center,\\n                    color: Colors.blue,\\n                    child: child,\\n                  ),\\n                ),\\n                // Widget passed as child will not be redrawn when the animation is updated.\\n                child: const Text(\\n                  \'This text is not being redrawn.\',\\n                  style: TextStyle(color: Colors.white),\\n                ),\\n              ),\\n            ),\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n```\\n\\n### AnimationController & XYZTransition Widgets\\n\\nExistence of an `AnimationController` itself gives a lot of configurable options & other features.\\n\\n:::warning\\n\\nFor using `AnimationController` in your `Widget`, you need to use `TickerProviderStateMixin` or `SingleTickerProviderStateMixin` (if there\'s only one `AnimationController` animation).\\n\\ne.g.\\n\\n**From:**\\n\\n```dart\\nclass _MyHomePageState extends State<MyHomePage> {\\n```\\n\\n**To:**\\n\\n```dart\\nclass _MyHomePageState extends State<MyHomePage> with SingleTickerProviderStateMixin {\\n```\\n\\n:::\\n\\n<video controls autoplay style={{\\"max-width\\": \\"100%\\"}} src={require(\'@site/static/img/animations-3.mp4\').default}></video>\\n\\n```dart\\nimport \'package:flutter/material.dart\';\\n\\nvoid main() => runApp(const MyApp());\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return const MaterialApp(\\n      home: MyHomePage(),\\n    );\\n  }\\n}\\n\\nclass MyHomePage extends StatefulWidget {\\n  const MyHomePage({Key? key}) : super(key: key);\\n\\n  @override\\n  State<MyHomePage> createState() => _MyHomePageState();\\n}\\n\\nclass _MyHomePageState extends State<MyHomePage>\\n    with SingleTickerProviderStateMixin {\\n  late AnimationController animationController;\\n\\n  @override\\n  void initState() {\\n    super.initState();\\n    animationController = AnimationController(\\n      vsync: this,\\n      lowerBound: 0.0,\\n      upperBound: 2.2,\\n      duration: const Duration(seconds: 1),\\n      reverseDuration: const Duration(seconds: 1),\\n    );\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(title: const Text(\'animations\')),\\n      body: Column(\\n        mainAxisAlignment: MainAxisAlignment.center,\\n        children: [\\n          Container(\\n            alignment: Alignment.center,\\n            height: 64.0,\\n            padding: const EdgeInsets.all(12.0),\\n            child: Row(\\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\\n              children: [\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.forward();\\n                  },\\n                  child: const Text(\'Forward\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.reverse();\\n                  },\\n                  child: const Text(\'Reverse\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.stop();\\n                  },\\n                  child: const Text(\'Stop\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.reset();\\n                  },\\n                  child: const Text(\'Reset\'),\\n                ),\\n              ],\\n            ),\\n          ),\\n          Expanded(\\n            child: Center(\\n              child: RotationTransition(\\n                turns: animationController,\\n                child: Container(\\n                  height: 96.0,\\n                  width: 96.0,\\n                  color: Colors.red,\\n                ),\\n              ),\\n            ),\\n          ),\\n          // Just for demo.\\n          AnimationControllerStateViewer(\\n            animationController: animationController,\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n\\n/// Just to show the available properties in the [AnimationController] class.\\n\\nclass AnimationControllerStateViewer extends StatefulWidget {\\n  final AnimationController animationController;\\n  const AnimationControllerStateViewer({\\n    Key? key,\\n    required this.animationController,\\n  }) : super(key: key);\\n\\n  @override\\n  AnimationControllerStateViewerState createState() =>\\n      AnimationControllerStateViewerState();\\n}\\n\\nclass AnimationControllerStateViewerState\\n    extends State<AnimationControllerStateViewer> {\\n  @override\\n  void initState() {\\n    super.initState();\\n    // Redraw this widget to show updated properties.\\n    widget.animationController.addListener(() {\\n      setState(() {});\\n    });\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Container(\\n      padding: const EdgeInsets.all(12.0),\\n      width: double.infinity,\\n      height: 156.0,\\n      child: Column(\\n        crossAxisAlignment: CrossAxisAlignment.start,\\n        children: [\\n          Text(\\n            \'animationController.isAnimating: ${widget.animationController.isAnimating}\',\\n          ),\\n          Text(\\n            \'animationController.isCompleted: ${widget.animationController.isCompleted}\',\\n          ),\\n          Text(\\n            \'animationController.isDismissed: ${widget.animationController.isDismissed}\',\\n          ),\\n          Text(\\n            \'animationController.status: ${widget.animationController.status}\',\\n          ),\\n          Text(\\n            \'animationController.value: ${widget.animationController.value}\',\\n          ),\\n          Text(\\n            \'animationController.velocity: ${widget.animationController.velocity}\',\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n```\\n\\n:::tip\\n\\nIf you noticed, there\'s actually no `curve` argument in `AnimationController`. You need to use [`CurvedAnimation`](https://api.flutter.dev/flutter/animation/CurvedAnimation-class.html) together.\\n\\n```dart\\nlate AnimationController animationController;\\nlate Animation<double> animation;\\n\\n@override\\nvoid initState() {\\n  super.initState();\\n  animationController = AnimationController(\\n    vsync: this,\\n    duration: const Duration(seconds: 1),\\n    reverseDuration: const Duration(seconds: 1),\\n  );\\n  animation = Tween<double>(begin: 0.0, end: 2.0).animate(\\n    CurvedAnimation(\\n      curve: Curves.easeInOut,\\n      reverseCurve: Curves.easeInCirc,\\n      parent: animationController,\\n    ),\\n  );\\n}\\n```\\n\\nIn above example, just use `CurvedAnimation` with `Tween<T>.animate` and then pass `animation` as the `turns` in `RotationTransition` instead of `animationController` itself.\\n\\n:::\\n\\n### AnimationController & AnimatedBuilder / AnimatedWidget\\n\\nThis should be only used when you wish to animate a Flutter `Widget` property which is not already present as `XYZTransition` in the Flutter framework.\\n\\n**Here, I\'ll be animating `fontSize` of a `Text`.**\\n\\nThough, it would\'ve been better to use `ScaleTransition` instead!\\n\\n<video controls autoplay style={{\\"max-width\\": \\"100%\\"}} src={require(\'@site/static/img/animations-4.mp4\').default}></video>\\n\\n```dart\\nimport \'package:flutter/material.dart\';\\n\\nvoid main() => runApp(const MyApp());\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return const MaterialApp(\\n      home: MyHomePage(),\\n    );\\n  }\\n}\\n\\nclass MyHomePage extends StatefulWidget {\\n  const MyHomePage({Key? key}) : super(key: key);\\n\\n  @override\\n  State<MyHomePage> createState() => _MyHomePageState();\\n}\\n\\nclass _MyHomePageState extends State<MyHomePage>\\n    with SingleTickerProviderStateMixin {\\n  late AnimationController animationController;\\n\\n  @override\\n  void initState() {\\n    super.initState();\\n    animationController = AnimationController(\\n      vsync: this,\\n      lowerBound: 16.0,\\n      upperBound: 24.0,\\n      duration: const Duration(seconds: 1),\\n      reverseDuration: const Duration(seconds: 1),\\n    );\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(title: const Text(\'animations\')),\\n      body: Column(\\n        mainAxisAlignment: MainAxisAlignment.center,\\n        children: [\\n          Container(\\n            alignment: Alignment.center,\\n            height: 64.0,\\n            padding: const EdgeInsets.all(12.0),\\n            child: Row(\\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\\n              children: [\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.forward();\\n                  },\\n                  child: const Text(\'Forward\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.reverse();\\n                  },\\n                  child: const Text(\'Reverse\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.stop();\\n                  },\\n                  child: const Text(\'Stop\'),\\n                ),\\n                ElevatedButton(\\n                  onPressed: () {\\n                    animationController.reset();\\n                  },\\n                  child: const Text(\'Reset\'),\\n                ),\\n              ],\\n            ),\\n          ),\\n          Expanded(\\n            child: Center(\\n              child: AnimatedBuilder(\\n                animation: animationController,\\n                builder: (context, child) => Text(\\n                  \'Well, this is a text.\',\\n                  style: TextStyle(\\n                    fontSize: animationController.value,\\n                    fontWeight: FontWeight.w700,\\n                  ),\\n                ),\\n              ),\\n            ),\\n          ),\\n          // Just for demo.\\n        ],\\n      ),\\n    );\\n  }\\n}\\n```\\n\\n### End Notes\\n\\nEven though, the examples shown above are quite simple, they show most of the things which are available to animate a Flutter `Widget` in your own way.\\n\\nA lot of animations can be combined together to create a complex animation. A listener can be added to `AnimationController` to listen to various events & possibly alter the curve, duration or any other property of animation in the middle of animation itself etc. Endless possibilities are there!\\n\\nFew of the properties were shown in the [AnimationController & XYZTransition Widgets](#animationcontroller--xyztransition-widgets) video.\\n\\nSo, these are my tips on adding animations in a Flutter app."},{"id":"cpp-future-async-sync-multi-threading","metadata":{"permalink":"/blog/cpp-future-async-sync-multi-threading","source":"@site/blog/2022-05-21-cpp-future-async-sync-multi-threading.md","title":"C++\'s <future>, making async C callbacks functions sync & enjoyable multi-threading","description":"I use `` header in C++ very-very often in my code everywhere at this point & wanted to share what\'s so cool in it.","date":"2022-05-21T00:00:00.000Z","formattedDate":"May 21, 2022","tags":[{"label":"c++","permalink":"/blog/tags/c"},{"label":"std::async","permalink":"/blog/tags/std-async"},{"label":"multi-threading","permalink":"/blog/tags/multi-threading"},{"label":"async","permalink":"/blog/tags/async"}],"readingTime":5.83,"truncated":true,"authors":[{"name":"Hitesh","title":"Flutter & React.js developer. Writes C++, Dart, JS & Python. Maintains few utility libraries. Beautiful UI <3","url":"https://github.com/alexmercerind","imageURL":"https://github.com/alexmercerind.png","key":"alexmercerind"}],"frontMatter":{"slug":"cpp-future-async-sync-multi-threading","authors":"alexmercerind","title":"C++\'s <future>, making async C callbacks functions sync & enjoyable multi-threading","tags":["c++","std::async","multi-threading","async"]},"prevItem":{"title":"Animations in Flutter done right [Flutter 2 & 3]","permalink":"/blog/animations-in-flutter-done-right"}},"content":"I use [`<future>`](https://cplusplus.com/reference/future) header in C++ very-very often in my code everywhere at this point & wanted to share what\'s so cool in it.\\n\\n\x3c!--truncate--\x3e\\n\\nGenerally, I don\'t really like classic way of handling `Thread`s, so much to worry about, spawning, running or joining. Even though, _nearly_ every language has that POSIX-like API.\\n\\nWhat I find more elegant is:\\n\\n- C#/.NET\'s `async`, `await` or `Task`\\n- JavaScript\'s `async`, `await` or `Promise` (I know JS is single-threaded, but still)\\n- Dart\'s `async`, `await` or `Future` (again, not actually \\"multi-threading\\").\\n\\nI got to know about `std::future` and `std::promise` in C++ 11 few years back & they\'re quite the same in terms of how they\'re used in code. My happiness couldn\'t be greater.\\n\\nJust see how elegant this looks:\\n\\n### Code\\n\\nUse `std::async` function to spawn a new thread and pass a function to it.\\n\\n```cpp\\n#include <future>\\n#include <iostream>\\n\\nint32_t main() {\\n\\n  auto future = std::async([&]() {\\n    std::cout << \\"A std::future came to life!\\\\n\\";\\n    std::this_thread::sleep_for(std::chrono::seconds(2));\\n    std::cout << \\"Hello from std::future & I\'m 2 seconds late!\\\\n\\";\\n  });\\n\\n  std::this_thread::sleep_for(std::chrono::seconds(1));\\n  std::cout << \\"Hey, I\'ll be first on the console!\\\\n\\";\\n  return 0;\\n}\\n```\\n\\nDon\'t let that capturing lambda confuse you.\\n\\nSomething like this will be up on your terminal:\\n\\n```cmd\\nA std::future came to life!\\nHey, I\'ll be first on the console!\\nHello from std::future & I\'m 2 seconds late!\\n```\\n\\n:::warning\\n\\nAlways keep a reference accessible to the `std::future` returned by the `std::async`.\\nOtherwise, your function passed will not launch on separate thread & just execute sync-ly.\\n\\nThe other day, I was spawning `std::future`s to do various things concurrently in a `for-loop` and noticed that everything was being executed synchronously. Then I came to know that I need to store their reference somewhere to be able to access them later. Added a `std::vector<std::future<void>>` in my case (where I pushed all returned `std::future`s).\\n\\nHere let\'s just remove the `future` variable from above code:\\n\\n```cpp\\n#include <future>\\n#include <iostream>\\n\\nint32_t main() {\\n  std::async([&]() {\\n    std::cout << \\"A std::future came to life!\\\\n\\";\\n    std::this_thread::sleep_for(std::chrono::seconds(2));\\n    std::cout << \\"Hello from std::future & I\'m 2 seconds late!\\\\n\\";\\n  });\\n\\n  std::this_thread::sleep_for(std::chrono::seconds(1));\\n  std::cout << \\"Hey, I\'ll be first on the console!\\\\n\\";\\n  return 0;\\n}\\n```\\n\\nNotice how \\"Hey, I\'ll be first on the console!\\" came in last. Something we didn\'t expect.\\n\\nTakes away the whole purpose.\\n\\n```\\nA std::future came to life!\\nHello from std::future & I\'m 2 seconds late!\\nHey, I\'ll be first on the console!\\n```\\n\\n:::\\n\\n### Equivalents in HLL Dart or JavaScript\\n\\n**How simple is that.** A separate thread launched with `std::async` & do whatever with it. This syntax is quite nice & familiar to how I\'m trained with Dart/JavaScript.\\n\\nTake equivalent Dart for example:\\n\\n```dart\\nvoid main() async {\\n  () async {\\n    print(\'An async function came to life!\');\\n    await Future.delayed(const Duration(seconds: 2));\\n    print(\'Hello from async function & I\\\\\'m 2 seconds late!\');\\n  }();\\n  await Future.delayed(const Duration(seconds: 1));\\n  print(\'Hey, I\\\\\'ll be first on the console!\');\\n}\\n```\\n\\n```\\nAn async function came to life!\\nHey, I\'ll be first on the console!\\nHello from async function & I\'m 2 seconds late!\\n```\\n\\nThis [`std::future`](https://cplusplus.com/reference/future/future/) stuff in C++ now may seem really cool to you, but I still haven\'t noticed any analog of [`Promise.all`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) from JavaScript in it yet.\\n\\nThough, simple thread create/start/join API, is also good in some situations like doing event-polling in background or just spinning up something consistently while UI is visible. Other than that, it just becomes a pain in my opinion to handle if we have a lot of async operations to worry about & handling of tasks.\\n\\n### Making a C async callback based function sync\\n\\nIf you\'ve written JavaScript, I think you know how some libraries still ask for a function as argument and call it back once some heavy/network-related operation is done. This reminds me of `fs` (callback based filesystem API) and `fs/promise` (`Promise`s based filesystem API) from Node.js. Converting a old callback based API into shiny new async API is something I would do to sooth my soul.\\n\\nAn equivalent for this exists in Dart to make a function sync: [Completer](https://api.dartlang.org/stable/dart-async/Completer-class.html).\\n\\nI had a similar situation in C/C++, [where I needed to \\"wait\\" for some async operation to finish before I could return the result from my function](https://github.com/alexmercerind/dart_vlc/blob/3b0571743f0ed2f90aa52ab92e955b55cd10d0dd/core/media_source/media.cc#L84-L87). I didn\'t know any solution but [`std::promise`](https://en.cppreference.com/w/cpp/thread/promise) from [`<future>`](https://cplusplus.com/reference/future/) came in very-very handy.\\n\\n**Let\'s take this code:**\\n\\nWe want to wait for the value that is being returned from `a_long_running_function_that_returns_result_in_callback` inside callback from another thread before proceeding to print `\\"This should not execute early!!!\\\\n\\"` on console.\\n\\n```cpp\\n#include <future>\\n#include <iostream>\\n\\n// Let\'s say we have this function which takes a lot of time to execute &\\n// returns the final result in the passed [callback] from another thread.\\n// I\'m sure a lot of C/C++ librares like this are in existence.\\n//\\n// We need to wait for the result outside the passed callback.\\n//\\n// A place to demonstrate awesomeness of `std::promise`.\\nvoid a_long_running_function_that_returns_result_in_callback(\\n    void (*callback)(int)) {\\n  std::thread([=]() {\\n    std::this_thread::sleep_for(std::chrono::seconds(1));\\n    callback(69420);\\n  }).detach();\\n}\\n\\nvoid print_the_value(int value) {\\n  std::cout << \\"The value is: \\" << value << \\"\\\\n\\";\\n}\\n\\nvoid main() {\\n  a_long_running_function_that_returns_result_in_callback(print_the_value);\\n  std::cout << \\"This should not execute early!!!\\\\n\\";\\n  std::cin.get();\\n}\\n```\\n\\nOutput of this on your terminal will be:\\n\\n```\\nThis should not execute early!!!\\nThe value is: 69420\\n```\\n\\nThe order is clearly messed up.\\n\\n**Let\'s bring [`std::promise`](https://en.cppreference.com/w/cpp/thread/promise) to the rescue:**\\n\\n```cpp\\n#include <future>\\n#include <iostream>\\n\\n// Don\'t kill me for using global variables. C\'mon it\'s C API that we\'re trying\\n// to wrap.\\nauto g_promise = std::promise<int>();\\n\\n// Let\'s say we have this function which takes a lot of time to execute &\\n// returns the final result in the passed [callback] from another thread.\\n// I\'m sure a lot of C/C++ librares like this are in existence.\\n//\\n// We need to wait for the result outside the passed callback.\\n//\\n// A place to demonstrate awesomeness of `std::promise`.\\nvoid a_long_running_function_that_returns_result_in_callback(\\n    void (*callback)(int)) {\\n  std::thread([=]() {\\n    std::this_thread::sleep_for(std::chrono::seconds(1));\\n    callback(69420);\\n  }).detach();\\n}\\n\\nvoid print_the_value(int value) {\\n  std::cout << \\"The value is: \\" << value << \\"\\\\n\\";\\n  // Set the value to the `std::future` corresponding to the promise.\\n  // Cause the wait to be over.\\n  g_promise.set_value(value);\\n}\\n\\nvoid main() {\\n  a_long_running_function_that_returns_result_in_callback(print_the_value);\\n  // Wait until the promise is resolved.\\n  g_promise.get_future().wait();\\n  std::cout << \\"This should not execute early!!!\\\\n\\";\\n\\n  std::cin.get();\\n}\\n```\\n\\nNotice how `std::promise::set_value` is called from the callback.\\nThen, `std::future::wait` is called from the main thread to wait for the promise to be resolved.\\n\\nSuch a nice syntax. If you wish to get the value inside [`std::promise`](https://en.cppreference.com/w/cpp/thread/promise) from the callback, you can use [`std::future::get`](https://en.cppreference.com/w/cpp/thread/future/get) instead of the [`std::future::wait`](https://en.cppreference.com/w/cpp/thread/future/wait).\\n\\n```cpp\\nint a_long_running_function_that_returns_same_result_without_callback() {\\n  a_long_running_function_that_returns_result_in_callback(print_the_value);\\n  // Wait until the promise is resolved & return from this wrapper function.\\n  return g_promise.get_future().get();\\n}\\n\\nvoid main() {\\n  std::cout\\n      << \\"Returned value: \\"\\n      << a_long_running_function_that_returns_same_result_without_callback()\\n      << \\"\\\\n\\";\\n  std::cin.get();\\n}\\n```\\n\\nThere are also following things to note, which one may find useful:\\n\\n- [`std::future::wait_for`](https://en.cppreference.com/w/cpp/thread/future/wait_for).\\n- [`std::future::wait_until`](https://en.cppreference.com/w/cpp/thread/future/wait_until).\\n\\nDon\'t spam Rust is better in comments (oh, there are no comments right now). I\'m staying with C++ for now."}]}')}}]);